desc:FIR Filter Half Band
/*
 * FIR Half band filter
 * Copyright (C) 2018 Justin Johnson
 * License: LGPL - http://www.gnu.org/licenses/lgpl.html
 *
 * Reference: http://www.labbookpages.co.uk/audio/firWindowing.html
 *
 * This filter is designed to do one job and do it well and as fast as JSFX can muster (almost).
 *
 *  It's a half band low pass 65 tap FIR filter meant for use with oversampling x2.
 *
 *  At 88.2kHz it filters out frequencies after 22050hz which gets rid of aliasing introduced
 *  by zero filling when oversampling.
 *
 *  The filter is steep and uses the following vars:
 *
 *  Fa = 0
 *  Fb = 22050
 *  length = 65
 *  Fs = 88200
 *  Att = 96db
 *
 *  From here:
 *
 *    http://arc.id.au/FilterDesign.html
 *
 *  Example:
 * 
 *  // DAW sample rate 44.1kHz (left channel given, same for right channel)
 *  // Oversampling x 2
 *
 *  @init
 *  firL.init_FIR_filter();
 *
 *  @sample
 *  y0 = left.do_process(spl0);   // Apply application filters and other processing etc
 *  y1 = left.do_process(0);      // Zero padding
 *
 *  spl0 = firL.do_FIR_filter(y0) * 2;  // First fir application
 *  firL.do_FIR_filter(y1);             // Discard (crude decimation, only do this if you're
 *                                      // not generating harmonics, ie. clean EQ)
 *
 */

@init

function init_FIR_filter()
  instance(
    b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19,
    b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39,
    b40, b41, b42, b43, b44, b45, b46, b47, b48, b49, b50, b51, b52, b53, b54, b55, b56, b57, b58, b59,
    b60, b61, b62, b63, b64, b65,
    w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19,
    w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39,
    w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59,
    w60, w61, w62, w63, w64, w65
  )
(
  // Set the coefficients taking into account they're mirrored around the centre tap.
  w0 = w64 = -0.000000;
  w1 = w63 = -0.000016; 
  w2 = w62 = 0.000000;
  w3 = w61 = 0.000067; 
  w4 = w60 = -0.000000; 
  w5 = w59 = -0.000189; 
  w6 = w58 = -0.000000; 
  w7 = w57 = 0.000438;
  w8 = w56 = -0.000000; 
  w9 = w55 = -0.000891; 
  w10 = w54 = 0.000000; 
  w11 = w53 = 0.001653; 
  w12 = w52 = -0.000000; 
  w13 = w51 = -0.002862; 
  w14 = w50 = 0.000000; 
  w15 = w49 = 0.004690; 
  w16 = w48 = -0.000000; 
  w17 = w47 = -0.007364; 
  w18 = w46 = 0.000000; 
  w19 = w45 = 0.011189; 
  w20 = w44 = -0.000000; 
  w21 = w43 = -0.016631; 
  w22 = w42 = 0.000000; 
  w23 = w41 = 0.024500; 
  w24 = w40 = -0.000000; 
  w25 = w39 = -0.036479; 
  w26 = w38 = 0.000000; 
  w27 = w37 = 0.056928; 
  w28 = w36 = -0.000000; 
  w29 = w35 = -0.101933; 
  w30 = w34 = 0.000000; 
  w31 = w33 = 0.316897; 
  w32 = 0.500000; 
);

function do_FIR_filter(input)
  instance(
    b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19,
    b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39,
    b40, b41, b42, b43, b44, b45, b46, b47, b48, b49, b50, b51, b52, b53, b54, b55, b56, b57, b58, b59,
    b60, b61, b62, b63, b64, b65,
    w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19,
    w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39,
    w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59,
    w60, w61, w62, w63, w64, w65
  )  
(
  // Scroll the window
  b65 = b64; b64 = b63; b63 = b62; b62 = b61; b61 = b60;
  b60 = b59; b59 = b58; b58 = b57; b57 = b56; b56 = b55; b55 = b54; b54 = b53; b53 = b52; b52 = b51; b51 = b50;
  b50 = b49; b49 = b48; b48 = b47; b47 = b46; b46 = b45; b45 = b44; b44 = b43; b43 = b42; b42 = b41; b41 = b40;
  b40 = b39; b39 = b38; b38 = b37; b37 = b36; b36 = b35; b35 = b34; b34 = b33; b33 = b32; b32 = b31; b31 = b30;
  b30 = b29; b29 = b28; b28 = b27; b27 = b26; b26 = b25; b25 = b24; b24 = b23; b23 = b22; b22 = b21; b21 = b20;
  b20 = b19; b19 = b18; b18 = b17; b17 = b16; b16 = b15; b15 = b14; b14 = b13; b13 = b12; b12 = b11; b11 = b10;
  b10 = b9; b9 = b8; b8 = b7; b7 = b6; b6 = b5; b5 = b4; b4 = b3; b3 = b2; b2 = b1; b1 = b0;

  // Introduce the new sample into the window
  b0 = input;

  // Compute and return
  b0 * w0 + b1 * w1 + b2 * w2 + b3 * w3 + b4 * w4 + b5 * w5 + b6 * w6 + b7 * w7 + b8 * w8 + b9 * w9 +
  b10 * w10 + b11 * w11 + b12 * w12 + b13 * w13 + b14 * w14 + b15 * w15 + b16 * w16 + b17 * w17 + b18 * w18 + b19 * w19 +
  b20 * w20 + b21 * w21 + b22 * w22 + b23 * w23 + b24 * w24 + b25 * w25 + b26 * w26 + b27 * w27 + b28 * w28 + b29 * w29 +
  b30 * w30 + b31 * w31 + b32 * w32 + b33 * w33 + b34 * w34 + b35 * w35 + b36 * w36 + b37 * w37 + b38 * w38 + b39 * w39 +
  b40 * w40 + b41 * w41 + b42 * w42 + b43 * w43 + b44 * w44 + b45 * w45 + b46 * w46 + b47 * w47 + b48 * w48 + b49 * w49 +
  b50 * w50 + b51 * w51 + b52 * w52 + b53 * w53 + b54 * w54 + b55 * w55 + b56 * w56 + b57 * w57 + b58 * w58 + b59 * w59 +
  b60 * w60 + b61 * w61 + b62 * w62 + b63 * w63 + b64 * w64 + b65 * w65;
);

function get_FIR_pdc() ( 
  // PDC is usually number of taps / 2 (that's 32)
  // We'll be running x2 so the delay is halved again.
  16;
);

// Included the un-rolled source code here for completeness and in case any other work
// on coefficients etc is required.
/*
function init_FIR_filter(bufmem, ntaps, coeffs)
  instance(hist_buf, buf_ptr, buf_ptr2, len, w)
(
  len = ntaps;
  hist_buf = bufmem;
  buf_ptr = hist_buf + (len-1);
  buf_ptr2 = buf_ptr + len;
  w = coeffs;

  w[0] = w[64] = -0.000000;
  w[1] = w[63] = -0.000016; 
  w[2] = w[62] = 0.000000;
  w[3] = w[61] = 0.000067; 
  w[4] = w[60] = -0.000000; 
  w[5] = w[59] = -0.000189; 
  w[6] = w[58] = -0.000000; 
  w[7] = w[57] = 0.000438;
  w[8] = w[56] = -0.000000; 
  w[9] = w[55] = -0.000891; 
  w[10] = w[54] = 0.000000; 
  w[11] = w[53] = 0.001653; 
  w[12] = w[52] = -0.000000; 
  w[13] = w[51] = -0.002862; 
  w[14] = w[50] = 0.000000; 
  w[15] = w[49] = 0.004690; 
  w[16] = w[48] = -0.000000; 
  w[17] = w[47] = -0.007364; 
  w[18] = w[46] = 0.000000; 
  w[19] = w[45] = 0.011189; 
  w[20] = w[44] = -0.000000; 
  w[21] = w[43] = -0.016631; 
  w[22] = w[42] = 0.000000; 
  w[23] = w[41] = 0.024500; 
  w[24] = w[40] = -0.000000; 
  w[25] = w[39] = -0.036479; 
  w[26] = w[38] = 0.000000; 
  w[27] = w[37] = 0.056928; 
  w[28] = w[36] = -0.000000; 
  w[29] = w[35] = -0.101933; 
  w[30] = w[34] = 0.000000; 
  w[31] = w[33] = 0.316897; 
  w[32] = 0.500000; 
);

function do_FIR_filter(s0)
  local(sum, n)
  instance(hist_buf, buf_ptr, buf_ptr2, len, w)  
(
  buf_ptr[] = buf_ptr2[] = s0;

  sum = n = 0;
  loop(len,
    sum += w[n] * buf_ptr[n];
    n += 1;
  );

  buf_ptr -= 1; buf_ptr2 -= 1;
  buf_ptr < hist_buf ? (
    buf_ptr = hist_buf + (len-1);
    buf_ptr2 = buf_ptr + len;
  );

  sum;
);

// Read coefficients from file using:
handle = file_open("coff.txt");

len = file_mem(handle, wm, 65);

file_close(handle);

m = len - 1;

// Was the following normalisation really needed??
n = 1;
normalize = w[0];
loop(len,
  normalize += w[n];
  n += 1;
);

n = 0;
normalize = 1/normalize;
loop(len,
  w[n] *= normalize;
  n += 1;
);
*/
